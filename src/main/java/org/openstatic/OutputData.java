package org.openstatic;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.apache.commons.text.StringEscapeUtils;

import org.json.JSONArray;
import org.json.JSONObject;

public class OutputData 
{

    public static Object guessType(String data)
    {
        if (data == null) return null;
        String dataLC = data.toLowerCase().trim();
        if (dataLC.equals("true"))
            return Boolean.valueOf(true);
        if (dataLC.equals("false"))
            return Boolean.valueOf(true);
        if (!dataLC.contains("."))
        {
            try
            {
                Long longData = Long.valueOf(data);
                return longData;
            } catch (Exception e) {}
        } else {
            try
            {
                Double doubleData = Double.valueOf(data);
                return doubleData;
            } catch (Exception e) {}
        }
        return data;
    }

    public static void writeJSON(PrintWriter pw, List<String[]> dataLines) throws IOException 
    {
        List<String[]> data = new ArrayList<String[]>(dataLines);
        JSONArray outputArray = new JSONArray();
        String[] columns = data.get(0);
        data.remove(0);
        data.forEach((row) -> {
            JSONObject rowObject = new JSONObject();
            for(int i = 0; i < row.length; i++)
            {
                rowObject.put(columns[i], guessType(row[i]));
            }
            outputArray.put(rowObject);
        });
        pw.print(outputArray.toString(2));
    }

    public static void writeHTML(String tableName, PrintWriter pw, List<String[]> dataLines) throws IOException 
    {
        pw.println("<!-- Generated By JSON-Roller v" + JSONRoller.VERSION + " https://openstatic.org/projects/json-roller/ -->");
        pw.println("""
            <html>
            <head>
            <script type="text/javascript">
                var upTriangle = String.fromCharCode(9650);
                var downTriangle = String.fromCharCode(9660);
                var imagesVisible = false;
                var columnsTotal = 0;
                var rowsTotal = 0;
                var rowsVisible = 0;
                var columns = [];

                function sortTable(table, col, reverse)
                {
                    var headerElements = table.tHead.children[0].children;
                    for(e of headerElements)
                    {
                        e.style.backgroundColor = "#808080";
                        e.innerHTML = e.innerHTML.replaceAll(new RegExp(upTriangle, "g"), '');
                        e.innerHTML = e.innerHTML.replaceAll(new RegExp(downTriangle, "g"), '');
                    }
                    if (reverse == 1)
                    {
                        headerElements[col].style.backgroundColor = "#04AA6D";
                        headerElements[col].innerHTML = headerElements[col].innerHTML + downTriangle;
                    } else {
                        headerElements[col].style.backgroundColor = "#04AA6D";
                        headerElements[col].innerHTML = headerElements[col].innerHTML + upTriangle;
                    }
                    var tb = table.tBodies[0], // use `<tbody>` to ignore `<thead>` and `<tfoot>` rows
                        tr = Array.prototype.slice.call(tb.rows, 0), // put rows into array
                        i;
                    reverse = -((+reverse) || -1);
                    tr = tr.sort(function (a, b) { // sort rows
                        return reverse // `-1 *` if want opposite order
                            * (a.cells[col].textContent.trim() // using `.textContent.trim()` for test
                                .localeCompare(b.cells[col].textContent.trim(), 'en', {numeric: true})
                            );
                    });
                    for(i = 0; i < tr.length; ++i) tb.appendChild(tr[i]); // append each row in order
                }

                function applyFilters()
                {
                    rowsVisible = 0;
                    var table = document.getElementById('data');
                    var tb = table.tBodies[0], // use `<tbody>` to ignore `<thead>` and `<tfoot>` rows
                    tr = Array.prototype.slice.call(tb.rows, 0);
                    for(row of tr)
                    {
                        var meetsFilters = true;
                        for(i = 0; i < columnsTotal; i++)
                        {
                            var selectEl = document.getElementById('filter' + i);
                            var filterValue = selectEl.value;
                            if (filterValue != '')
                            {
                                var rowColVal = row.cells[i].textContent.trim();
                                if (rowColVal != filterValue)
                                    meetsFilters = false;
                            }
                        }
                        if (meetsFilters)
                        {
                            row.style.display = 'table-row';
                            rowsVisible++;
                        } else {
                            row.style.display = 'none';
                        }
                    }
                    updateRowInfo();
                }

                function updateRowInfo()
                {
                    if (rowsVisible == rowsTotal)
                        document.getElementById('rowInfo').innerHTML = '(' + rowsTotal.toLocaleString() + ' rows)'; 
                    else
                       document.getElementById('rowInfo').innerHTML = '(' + rowsVisible.toLocaleString() + ' / ' + rowsTotal.toLocaleString() + ' rows)'; 
                }

                function isNumeric(n) {
                return !isNaN(parseFloat(n)) && isFinite(n);
                }

                function valuesForColumn(table, col)
                {
                    var tb = table.tBodies[0], // use `<tbody>` to ignore `<thead>` and `<tfoot>` rows
                        tr = Array.prototype.slice.call(tb.rows, 0), // put rows into array
                        i;
                    var ra = [];
                    for(row of tr)
                    {
                        ra.push(row.cells[col].textContent.trim());
                    }
                    return ra;
                }
                
                function rowElementValues(row)
                {
                    var ra = [];
                    for(x of row.cells)
                    {
                        var colValue = x.textContent.trim();
                        ra.push(colValue);
                    }
                    return ra;
                }
                
                function csvEscape(ary)
                {
                    var ra = [];
                    for(x of ary)
                    {
                        if (!isNumeric(x))
                        {
                            x = '"' + x + '"';
                        }
                        ra.push(x);
                    }
                    return ra;
                }
                
                function generateCSV()
                {
                    var table = document.getElementById('data');
                    var tb = table.tBodies[0],
                        tr = Array.prototype.slice.call(tb.rows, 0),
                        th = table.tHead;
                    var myCSV = csvEscape(columns).join(',') + '\\n';
                    for(row of tr)
                    {
                        if (row.style.display != 'none')
                            myCSV += (csvEscape(rowElementValues(row)).join(',')) + '\\n';
                    }
                    return myCSV;
                }
                
                function exportCSV()
                {
                    var myCSV = generateCSV();
                    var link = document.createElement('a');
                    var uri = 'data:text/csv;charset=utf-8,' + escape(myCSV);
                    link.href = uri;
                    link.download = 'data.csv';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }

                function uniqueArray(ary)
                {
                    return [...new Set(ary)];
                }

                function createOptions(selectElement, ary)
                {
                    var newOption = document.createElement('option');
                    newOption.value = "";
                    newOption.innerHTML = "";
                    selectElement.appendChild(newOption);
                    for(x of ary)
                    {
                        var newOption = document.createElement('option');
                        newOption.value = x;
                        newOption.innerHTML = x;
                        selectElement.appendChild(newOption);
                    }
                }

                function makeSortable(table)
                {
                    rowsTotal = table.tBodies[0].rows.length;
                    rowsVisible = rowsTotal;
                    updateRowInfo();
                    var th = table.tHead, i;
                    th && (th = th.rows[0]) && (th = th.cells);
                    if (th) i = th.length;
                    else return; // if no `<thead>` then do nothing
                    columnsTotal = i;
                    var autoFilterRow = document.createElement('tr');
                    var j = 0;
                    for(e of th)
                    {
                        columns.push(e.textContent);
                        var newTh = document.createElement('td');
                        newTh.style.padding = '0px 0px 0px 0px';
                        var selectEl = document.createElement('select');
                        selectEl.style.width = '100%';
                        selectEl.id = 'filter'+j;
                        createOptions(selectEl, uniqueArray(valuesForColumn(table, j)).sort(function (a, b) { // sort rows
                            return (a.localeCompare(b, 'en', {numeric: true}));
                        }));
                        let fj = j, ftable = table, fselectEl = selectEl;
                        selectEl.onchange = function() {
                            applyFilters();
                        };
                        newTh.appendChild(selectEl);
                        autoFilterRow.appendChild(newTh);
                        j++;
                    }
                    table.tHead.appendChild(autoFilterRow);
                    while (--i >= 0) (function (i) {
                        var dir = 1;
                        th[i].addEventListener('click', function () {sortTable(table, i, (dir = 1 - dir))});
                    }(i));
                    table.style.display = 'table';
                }

                function makeAllSortable()
                {
                    var t = document.body.getElementsByTagName('table'), i = t.length;
                    while (--i >= 0) makeSortable(t[i]);

                    var imgDivs = document.body.getElementsByClassName('imgDiv'), imgDivsCount = imgDivs.length;
                    if (imgDivsCount > 0)
                        document.getElementById('showImageButton').style.display = 'inline-block';
                    document.getElementById('exportCsvButton').style.display = 'inline-block';
                    document.getElementById('loadingMSG').style.display = 'none';
                }

                function toggleImages()
                {
                    if (!imagesVisible)
                    {
                        var t = document.body.getElementsByClassName('imgDiv'), i = t.length;
                        while (--i >= 0)
                        {
                            t[i].style.display = 'block';
                        }
                        imagesVisible = true;
                        document.getElementById('showImageButton').innerHTML = "Hide Images";
                    } else {
                        var t = document.body.getElementsByClassName('imgDiv'), i = t.length;
                        while (--i >= 0)
                        {
                            t[i].style.display = 'none';
                        }
                        imagesVisible = false;
                        document.getElementById('showImageButton').innerHTML = "Show Images";
                    }
                }

                </script>
                <style>
                    table
                    {
                        font-family: Arial, Helvetica, sans-serif;
                        border-collapse: collapse;
                        width: 100%;
                    }

                    #data td, #data th
                    {
                        border: 1px solid #ddd;
                        padding: 8px;
                    }

                    #data tr:nth-child(even){background-color: #f2f2f2;}

                    #data tr:hover {background-color: #ddd;}

                    #data th {
                        padding-top: 12px;
                        padding-bottom: 12px;
                        text-align: left;
                        cursor: pointer;
                        background-color: #808080;
                        color: white;
                    }

                    img {
                        max-height: 128px;
                    }
                    
                    button {
                        height: 32px;
                        vertical-align: text-bottom;
                    }

                    .imgDiv {
                        display: none;
                    }

                    .headerDiv {
                        font-size: 32px;
                        border: 1px black solid;
                        padding: 4px 4px 4px 4px;
                        width: 99%;
                        margin-left: 4px;
                        margin-right: 4px;
                        position: fixed;
                        top: 6px;
                        left: 0px;
                        background-color: white;
                    }
                </style>
            </head>
            <body onload="makeAllSortable()">
                """);
        pw.println("<div class=\"headerDiv\"><span id=\"loadingMSG\">Loading... </span>" + tableName + " <span id=\"rowInfo\" style=\"font-size: 18px;\"></span> <button id=\"exportCsvButton\" style=\"display: none;\" onclick=\"exportCSV()\">Export (Filtered and Sorted) CSV</button><button style=\"display: none;\" id=\"showImageButton\" onclick=\"toggleImages()\">Show Images</button><a href=\"https://openstatic.org/projects/json-roller/\" target=\"_blank\" style=\"float: right; font-size: 18px; text-decoration: none;\">Generated by json-roller</a></div>");
        pw.println("<table id=\"data\" style=\"margin-top: 64px; display: none;\">");
        pw.println("<thead><tr>");
        String[] columnHeaders = dataLines.get(0);
        pw.println(Stream.of(columnHeaders).map(OutputData::makeColumnHeader).collect(Collectors.joining()));
        pw.println("</tr></thead><tbody>");
        dataLines.stream().skip(1)
            .map(OutputData::convertToHTML)
            .forEach(pw::println);
        pw.println("</tbody></table></body></html>");
    }
    
    public static String convertToHTML(String[] data)
    {
        return "<tr>" + Stream.of(data)
                .map(OutputData::makeCell)
                .collect(Collectors.joining()) + "</tr>";
    }
    

    public static String makeColumnHeader(String data) 
    {
        return "<th>" + StringEscapeUtils.escapeHtml4(data) + "</th>";
    }

    public static String makeCell(String data) 
    {
        String dataLC = data.toLowerCase();
        if (dataLC.startsWith("https://") || dataLC.startsWith("http://"))
        {
            if (dataLC.endsWith(".jpg") || dataLC.endsWith(".png") || dataLC.endsWith(".gif") || dataLC.endsWith(".webp"))
            {
                return "<td><div class=\"imgDiv\"><img src=\"" + data + "\" onerror=\"this.style.display = 'none';\"></div><a target=\"_blank\" href=\"" + data + "\">" +  StringEscapeUtils.escapeHtml4(data) + "</a></td>";
            } else {
               return "<td><a target=\"_blank\" href=\"" + data + "\">" +  StringEscapeUtils.escapeHtml4(data) + "</a></td>";
            }
        } else {
            return "<td>" + StringEscapeUtils.escapeHtml4(data) + "</td>";
        }
    }

    public static void writeCSV(PrintWriter pw, List<String[]> dataLines) throws IOException 
    {
        dataLines.stream()
            .map(OutputData::convertToCSV)
            .forEach(pw::println);
    }
    
    public static String convertToCSV(String[] data)
    {
        return Stream.of(data)
                .map(OutputData::escapeSpecialCharacters)
                .collect(Collectors.joining(","));
    }
    
    public static String escapeSpecialCharacters(String data) 
    {
        String escapedData = data.replaceAll("\\R", " ");
        if (data.contains(",") || data.contains("\"") || data.contains("'") || data.contains(" ")) {
            data = data.replace("\"", "\"\"");
            escapedData = "\"" + data + "\"";
        }
        return escapedData;
    }

    public static void writeTSV(PrintWriter pw, List<String[]> dataLines) throws IOException 
    {
        dataLines.stream()
            .map(OutputData::convertToTSV)
            .forEach(pw::println);
    }
    
    public static String convertToTSV(String[] data)
    {
        return Stream.of(data)
                .map(OutputData::escapeSpecialTabCharacters)
                .collect(Collectors.joining("\t"));
    }
    
    public static String escapeSpecialTabCharacters(String data) 
    {
        String escapedData = data.replaceAll("\\t", " ").replaceAll("\\r", " ");
        return escapedData;
    }

    public static void writeMarkdown(PrintWriter pw, List<String[]> dataLines) throws IOException 
    {
        boolean firstLine = true;
        int[] columnSizes = new int[dataLines.get(0).length];
        for(String[] row : dataLines)
        {
            for(int i = 0; i < row.length; i++)
            {
                if (row[i].length() > columnSizes[i])
                    columnSizes[i] = row[i].length();
            }
        }
        for(int i = 0; i < columnSizes.length; i++)
        {
            columnSizes[i]++;
        }
        for(String[] row : dataLines)
        {
            for(int i = 0; i < row.length; i++)
            {
                pw.append("| ");
                pw.append(createSizedString(row[i], columnSizes[i]));
            }
            pw.println("|");
            if (firstLine)
            {
                firstLine = false;
                for(int i = 0; i < columnSizes.length; i++)
                {
                    pw.append("|-");
                    pw.append(getDashed(columnSizes[i]));
                }
                pw.println("|");
            }
        }
        pw.flush();
        pw.close();
    }

    public static String getPaddingSpace(int value)
    {
        StringBuffer x = new StringBuffer("");
        for (int n = 0; n < value; n++)
        {
            x.append(" ");
        }
        return x.toString();
    }

    public static String getDashed(int value)
    {
        StringBuffer x = new StringBuffer("");
        for (int n = 0; n < value; n++)
        {
            x.append("-");
        }
        return x.toString();
    }

    public static String createSizedString(String value, int size)
    {
        if (value == null)
        {
            return getPaddingSpace(size);
        } else if (value.length() == size) {
            return value;
        } else if (value.length() > size) {
            return value.substring(0, size);
        } else if (value.length() < size) {
            return value + getPaddingSpace(size - value.length());
        } else {
            return null;
        }
    }
}